@model cmcs.Models.Claim
@{
    ViewData["Title"] = "Review Claim";
}

<h2>Review Claim #@Model.ClaimId</h2>
<hr />

<div class="row">
    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Claim Details</h5>
            </div>
            <div class="card-body">
                <dl class="row">
                    <dt class="col-sm-4">Lecturer:</dt>
                    <dd class="col-sm-8">@Model.LecturerName (@Model.LecturerEmail)</dd>

                    <dt class="col-sm-4">Claim Month:</dt>
                    <dd class="col-sm-8">@Model.ClaimMonth.ToString("MMMM yyyy")</dd>

                    <dt class="col-sm-4">Total Hours:</dt>
                    <dd class="col-sm-8">@Model.TotalHours</dd>

                    <dt class="col-sm-4">Hourly Rate:</dt>
                    <dd class="col-sm-8">R @Model.RatePerHour.ToString("N2")</dd>

                    <dt class="col-sm-4">Total Amount:</dt>
                    <dd class="col-sm-8"><strong>R @Model.TotalAmount.ToString("N2")</strong></dd>

                    <dt class="col-sm-4">Status:</dt>
                    <dd class="col-sm-8">
                        @if (Model.Status == "Submitted")
                        {
                            <span class="badge bg-info">@Model.Status</span>
                        }
                        else if (Model.Status == "Under Review")
                        {
                            <span class="badge bg-warning">@Model.Status</span>
                        }
                    </dd>

                    <dt class="col-sm-4">Submitted:</dt>
                    <dd class="col-sm-8">@Model.SubmittedDate.ToString("yyyy-MM-dd HH:mm")</dd>
                </dl>

                @if (!string.IsNullOrEmpty(Model.Notes))
                {
                    <div class="mt-3">
                        <div class="row">
                            <dt class="col-sm-4">Lecturer Notes:</dt>
                            <dd class="col-sm-8 border rounded p-2 bg-light">@Model.Notes</dd>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="col-md-6">
        <div class="card">
            <div class="card-header">
                <h5 class="mb-0">Supporting Documents</h5>
            </div>
            <div class="card-body">
                @if (Model.SupportingDocuments.Any())
                {
                    <div class="list-group">
                        @foreach (var doc in Model.SupportingDocuments)
                        {
                            <div class="list-group-item d-flex justify-content-between align-items-center">
                                <div>
                                    <i class="fas fa-file @(GetFileIcon(doc.FileName)) me-2"></i>
                                    @doc.FileName
                                    <br />
                                    <small class="text-muted">
                                        Uploaded: @doc.UploadDate.ToString("yyyy-MM-dd HH:mm") |
                                        Size: @((doc.FileSize / 1024.0).ToString("N2")) KB
                                    </small>
                                </div>
                                <a href="@Url.Action("DownloadDocument", "Home", new { id = doc.SupportingDocumentId })"
                                   class="btn btn-sm btn-outline-primary">
                                    <i class="fas fa-download"></i> Download
                                </a>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <p class="text-muted">No supporting documents uploaded.</p>
                }
            </div>
        </div>

        <div class="card mt-3">
            <div class="card-header">
                <h5 class="mb-0">Approval Actions</h5>
            </div>
            <div class="card-body">
                <div class="d-grid gap-2">
                    <form asp-action="ApproveClaim" method="post" class="d-inline">
                        <input type="hidden" name="id" value="@Model.ClaimId" />
                        <button type="submit" class="btn btn-success btn-lg w-100">
                            <i class="fas fa-check-circle"></i> Approve Claim
                        </button>
                    </form>

                    <form asp-action="RejectClaim" method="post" class="d-inline">
                        <input type="hidden" name="id" value="@Model.ClaimId" />
                        <button type="submit" class="btn btn-danger btn-lg w-100">
                            <i class="fas fa-times-circle"></i> Reject Claim
                        </button>
                    </form>

                    <a asp-action="AdminDashboard" class="btn btn-secondary w-100">
                        <i class="fas fa-arrow-left"></i> Back to Dashboard
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

@functions {
    private string GetFileIcon(string fileName)
    {
        // Simple file extension check without System.IO
        if (fileName.Contains("."))
        {
            var extension = fileName.Substring(fileName.LastIndexOf('.')).ToLower();
            switch (extension)
            {
                case ".pdf":
                    return "fa-file-pdf text-danger";
                case ".doc":
                case ".docx":
                    return "fa-file-word text-primary";
                case ".xls":
                case ".xlsx":
                    return "fa-file-excel text-success";
                case ".jpg":
                case ".jpeg":
                case ".png":
                case ".gif":
                    return "fa-file-image text-warning";
                default:
                    return "fa-file text-secondary";
            }
        }
        return "fa-file text-secondary";
    }
}