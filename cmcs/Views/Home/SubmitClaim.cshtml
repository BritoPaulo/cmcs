@model cmcs.Models.Claim
@{
    ViewData["Title"] = "Submit New Claim";
}

<h2>Submit New Claim</h2>
<hr />

<form asp-action="SubmitClaim" method="post" enctype="multipart/form-data" id="claimForm">
    @Html.AntiForgeryToken()

    <div class="row mb-3">
        <div class="col-md-6">
            <label asp-for="ClaimMonth" class="form-label"></label>
            <input asp-for="ClaimMonth" class="form-control" type="month"
                   min="@DateTime.Now.AddMonths(-12).ToString("yyyy-MM")"
                   max="@DateTime.Now.ToString("yyyy-MM")" />
            <span asp-validation-for="ClaimMonth" class="text-danger"></span>
        </div>
        <div class="col-md-6">
            <label asp-for="TotalHours" class="form-label"></label>
            <input asp-for="TotalHours" class="form-control" step="0.5" placeholder="e.g., 40.5"
                   min="0.5" max="200" />
            <span asp-validation-for="TotalHours" class="text-danger"></span>
        </div>
    </div>

    <div class="row mb-3">
        <div class="col-md-6">
            <label asp-for="RatePerHour" class="form-label"></label>
            <input asp-for="RatePerHour" class="form-control" placeholder="e.g., 300"
                   min="100" max="1000" />
            <span asp-validation-for="RatePerHour" class="text-danger"></span>
        </div>
        <div class="col-md-6">
            <label class="form-label">Total Amount</label>
            <input type="text" class="form-control" value="R 0.00" readonly id="totalAmountDisplay" />
            <small class="form-text text-muted">Calculated automatically</small>
        </div>
    </div>

    <div class="mb-3">
        <label asp-for="Notes" class="form-label"></label>
        <textarea asp-for="Notes" class="form-control" rows="3" placeholder="Additional notes (optional)..."
                  maxlength="500"></textarea>
        <small class="form-text text-muted">
            <span id="charCount">0</span>/500 characters
        </small>
        <span asp-validation-for="Notes" class="text-danger"></span>
    </div>

    <!-- Enhanced File Upload Section -->
    <div class="mb-4">
        <label class="form-label fw-bold">Supporting Documents</label>

        <div class="card">
            <div class="card-body">
                <div class="mb-3">
                    <input class="form-control" type="file" name="supportingDocs" multiple
                           id="fileUpload"
                           accept=".pdf,.doc,.docx,.xls,.xlsx,.jpg,.jpeg,.png,.gif" />
                    <div class="form-text">
                        <i class="fas fa-info-circle"></i>
                        Allowed files: PDF, Word, Excel, JPG, PNG, GIF (Max 10MB per file, 5 files max)
                    </div>
                </div>

                <!-- File Preview Area -->
                <div id="filePreview" class="mt-3" style="display: none;">
                    <h6>Selected Files:</h6>
                    <div id="fileList" class="list-group"></div>
                    <div class="mt-2">
                        <small class="text-muted">
                            Total size: <span id="totalSize">0</span> MB
                        </small>
                    </div>
                </div>

                <!-- Upload Progress -->
                <div id="uploadProgress" class="mt-3" style="display: none;">
                    <div class="progress">
                        <div class="progress-bar" role="progressbar" style="width: 0%"></div>
                    </div>
                    <small class="text-muted mt-1" id="progressText">Preparing upload...</small>
                </div>
            </div>
        </div>
    </div>

    <div class="mb-3 form-check">
        <input type="checkbox" class="form-check-input" id="termsCheck" required>
        <label class="form-check-label" for="termsCheck">
            I confirm that the information provided is accurate and I have uploaded all required supporting documents.
        </label>
    </div>

    <div class="d-grid gap-2 d-md-flex justify-content-md-end">
        <a asp-action="LecturerDashboard" class="btn btn-secondary me-md-2">Cancel</a>
        <button type="submit" class="btn btn-primary btn-lg" id="submitBtn">
            <i class="fas fa-paper-plane"></i> Submit Claim
        </button>
    </div>
</form>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        // Calculate total amount in real-time
        document.getElementById('TotalHours').addEventListener('input', calculateTotal);
        document.getElementById('RatePerHour').addEventListener('input', calculateTotal);

        function calculateTotal() {
            const hours = parseFloat(document.getElementById('TotalHours').value) || 0;
            const rate = parseFloat(document.getElementById('RatePerHour').value) || 0;
            const total = hours * rate;
            document.getElementById('totalAmountDisplay').value = 'R ' + total.toFixed(2);
        }

        // Character count for notes
        document.getElementById('Notes').addEventListener('input', function() {
            document.getElementById('charCount').textContent = this.value.length;
        });

        // File upload handling
        const fileUpload = document.getElementById('fileUpload');
        const filePreview = document.getElementById('filePreview');
        const fileList = document.getElementById('fileList');
        const totalSize = document.getElementById('totalSize');
        const submitBtn = document.getElementById('submitBtn');

        fileUpload.addEventListener('change', function(e) {
            fileList.innerHTML = '';
            let totalFileSize = 0;
            const maxFiles = 5;
            const maxSize = 10 * 1024 * 1024; // 10MB in bytes

            if (this.files.length > maxFiles) {
                alert(`Maximum ${maxFiles} files allowed. Please select fewer files.`);
                this.value = '';
                return;
            }

            for (let file of this.files) {
                // Check file size
                if (file.size > maxSize) {
                    alert(`File "${file.name}" is too large. Maximum size is 10MB.`);
                    this.value = '';
                    return;
                }

                totalFileSize += file.size;

                const fileItem = document.createElement('div');
                fileItem.className = 'list-group-item d-flex justify-content-between align-items-center';
                fileItem.innerHTML = `
                    <div>
                        <i class="fas ${getFileIcon(file.name)} me-2"></i>
                        ${file.name}
                        <br>
                        <small class="text-muted">${(file.size / 1024 / 1024).toFixed(2)} MB</small>
                    </div>
                    <button type="button" class="btn btn-sm btn-outline-danger" onclick="removeFile(this)">
                        <i class="fas fa-times"></i>
                    </button>
                `;
                fileList.appendChild(fileItem);
            }

            totalSize.textContent = (totalFileSize / 1024 / 1024).toFixed(2);
            filePreview.style.display = totalFileSize > 0 ? 'block' : 'none';
        });

                function getFileIcon(filename) {
            // Simple file extension extraction without Path.GetExtension
            const dotIndex = filename.lastIndexOf('.');
            if (dotIndex === -1) return 'fa-file text-secondary';

            const ext = filename.substring(dotIndex).toLowerCase();
            const icons = {
                '.pdf': 'fa-file-pdf text-danger',
                '.doc': 'fa-file-word text-primary',
                '.docx': 'fa-file-word text-primary',
                '.xls': 'fa-file-excel text-success',
                '.xlsx': 'fa-file-excel text-success',
                '.jpg': 'fa-file-image text-warning',
                '.jpeg': 'fa-file-image text-warning',
                '.png': 'fa-file-image text-warning',
                '.gif': 'fa-file-image text-warning'
            };
            return icons[ext] || 'fa-file text-secondary';
        }

        function removeFile(button) {
            const fileItem = button.closest('.list-group-item');
            fileItem.remove();

            // Update UI if no files left
            if (fileList.children.length === 0) {
                filePreview.style.display = 'none';
                fileUpload.value = '';
            }
        }

        // Form submission handling
        document.getElementById('claimForm').addEventListener('submit', function(e) {
            const files = fileUpload.files;
            if (files.length === 0) {
                if (!confirm('You haven\'t uploaded any supporting documents. Continue anyway?')) {
                    e.preventDefault();
                    return;
                }
            }

            // Disable submit button to prevent double submission
            submitBtn.disabled = true;
            submitBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Submitting...';
        });

        // Initialize calculation on page load
        calculateTotal();
        document.getElementById('charCount').textContent = document.getElementById('Notes').value.length;
    </script>
}